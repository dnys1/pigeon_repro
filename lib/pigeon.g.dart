// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class NativeAuthSession {
  NativeAuthSession({
    required this.isSignedIn,
    this.userSub,
    this.userPoolTokens,
    this.identityId,
    this.awsCredentials,
  });

  bool isSignedIn;

  String? userSub;

  NativeUserPoolTokens? userPoolTokens;

  String? identityId;

  NativeAWSCredentials? awsCredentials;

  Object encode() {
    return <Object?>[
      isSignedIn,
      userSub,
      userPoolTokens?.encode(),
      identityId,
      awsCredentials?.encode(),
    ];
  }

  static NativeAuthSession decode(Object result) {
    result as List<Object?>;
    return NativeAuthSession(
      isSignedIn: result[0]! as bool,
      userSub: result[1] as String?,
      userPoolTokens: result[2] != null
          ? NativeUserPoolTokens.decode(result[2]! as List<Object?>)
          : null,
      identityId: result[3] as String?,
      awsCredentials: result[4] != null
          ? NativeAWSCredentials.decode(result[4]! as List<Object?>)
          : null,
    );
  }
}

class NativeUserPoolTokens {
  NativeUserPoolTokens({
    required this.accessToken,
    required this.refreshToken,
    required this.idToken,
  });

  String accessToken;

  String refreshToken;

  String idToken;

  Object encode() {
    return <Object?>[
      accessToken,
      refreshToken,
      idToken,
    ];
  }

  static NativeUserPoolTokens decode(Object result) {
    result as List<Object?>;
    return NativeUserPoolTokens(
      accessToken: result[0]! as String,
      refreshToken: result[1]! as String,
      idToken: result[2]! as String,
    );
  }
}

class NativeAWSCredentials {
  NativeAWSCredentials({
    required this.accessKeyId,
    required this.secretAccessKey,
    this.sessionToken,
    this.expirationIso8601Utc,
  });

  String accessKeyId;

  String secretAccessKey;

  String? sessionToken;

  String? expirationIso8601Utc;

  Object encode() {
    return <Object?>[
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationIso8601Utc,
    ];
  }

  static NativeAWSCredentials decode(Object result) {
    result as List<Object?>;
    return NativeAWSCredentials(
      accessKeyId: result[0]! as String,
      secretAccessKey: result[1]! as String,
      sessionToken: result[2] as String?,
      expirationIso8601Utc: result[3] as String?,
    );
  }
}

class _ToHostCodec extends StandardMessageCodec {
  const _ToHostCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeAWSCredentials) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeAuthSession) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserPoolTokens) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeAWSCredentials.decode(readValue(buffer)!);
      case 129: 
        return NativeAuthSession.decode(readValue(buffer)!);
      case 130: 
        return NativeUserPoolTokens.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ToHost {
  /// Constructor for [ToHost].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ToHost({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ToHostCodec();

  Future<NativeAuthSession> fetchAuthSession() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ToHost.fetchAuthSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as NativeAuthSession?)!;
    }
  }
}

class _FromHostCodec extends StandardMessageCodec {
  const _FromHostCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeAWSCredentials) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeAuthSession) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserPoolTokens) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeAWSCredentials.decode(readValue(buffer)!);
      case 129: 
        return NativeAuthSession.decode(readValue(buffer)!);
      case 130: 
        return NativeUserPoolTokens.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FromHost {
  static const MessageCodec<Object?> codec = _FromHostCodec();

  Future<NativeAuthSession> fetchAuthSession();

  static void setup(FromHost? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FromHost.fetchAuthSession', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          final NativeAuthSession output = await api.fetchAuthSession();
          return output;
        });
      }
    }
  }
}
